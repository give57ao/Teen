<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ez.teen.chat.mapper.ChatMapper">

<!-- 메세지 리스트 가져오기 -->
<select id="message_list" parameterType="com.ez.teen.chat.model.ChatModel" resultType="com.ez.teen.chat.model.ChatModel">
    select chat_no, room, send_nick, recv_nick, send_time, content, read_chk
    from chat
    where chat_no in (select max(chat_no) from chat group by room) and (send_nick = #{member_nick} or recv_nick=#{member_nick})
    order by SEND_TIME ASC
</select>

<!-- 메세지 list에서 상대방 profile 가져오기 -->
<select id="get_other_profile" parameterType="com.ez.teen.chat.model.ChatModel" resultType="String">
    select member_profile from member
    <choose>
        <when test="send_nick == member_nick">
            where member_nick = #{recv_nick}
        </when>
        <otherwise>
            where member_nick = #{send_nick}
        </otherwise>
    </choose>
</select>

<!-- 안읽은 메세지 갯수 가져오기 -->
<select id="count_unread" parameterType="com.ez.teen.chat.model.ChatModel" resultType="Int">
    select count(chat_no) from chat
    where recv_nick=#{member_nick} and read_chk=0 and room=#{room}
</select>

<!-- 메세지 내용 가져오기 -->
<select id="room_content_list" parameterType="com.ez.teen.chat.model.ChatModel" resultType="com.ez.teen.chat.model.ChatModel">
    select c.chat_no, c.room, c.send_nick, c.recv_nick, c.send_time, c.content, c.read_chk, m.member_profile
    from chat c left outer join member m
    on c.recv_nick = m.member_nick
    <choose>
        <when test="room != 0">
            where room=#{room} and  content is not null
        </when>
        <otherwise>
            where (recv_nick = #{recv_nick} and send_nick = #{member_nick}) or (send_nick = #{recv_nick} and recv_nick = #{member_nick})
        </otherwise>
    </choose>
	order by send_time asc
</select>

<!-- 메세지 읽음 처리 -->
<update id="message_read_chk" parameterType="com.ez.teen.chat.model.ChatModel">
    update chat set read_chk=1
    <choose>
        <when test="room != 0">
            where room=#{room} and read_chk=0 and recv_nick=#{member_nick}
        </when>
        <otherwise>
            where send_nick=#{recv_nick} and read_chk=0 and recv_nick=#{member_nick}
        </otherwise>
    </choose>

</update>

<!-- 메세지리스트에서 메세지 보내기 -->
<insert id="messageSendInlist" parameterType="com.ez.teen.chat.model.ChatModel">
    <choose>
        <when test="room != 0">
            insert into chat values(SEQ_CHAT_NO.NEXTVAL, #{room}, #{send_nick}, #{recv_nick}, TO_CHAR(SYSTIMESTAMP, 'YYYY-MM-DD HH24:MI'), #{content}, 0)
        </when>
        <otherwise>
            insert into chat(chat_no,room,send_nick,recv_nick,send_time) 
            values(SEQ_CHAT_NO.NEXTVAL, #{room}, #{send_nick}, #{recv_nick}, TO_CHAR(SYSTIMESTAMP, 'YYYY-MM-DD HH24:MI'))
        </otherwise>
    </choose>
</insert>

<!-- room 번호 최댓값 구하기 -->
<select id="max_room"  parameterType="com.ez.teen.chat.model.ChatModel" resultType="Int">
    select max(room) from chat
</select>

<!-- 메세지 이력이 있는지 검색 -->
<select id="exist_chat" parameterType="com.ez.teen.chat.model.ChatModel" resultType="Int">
    select count(chat_no) from chat
    where (recv_nick = #{recv_nick} and send_nick=#{send_nick}) or (send_nick = #{recv_nick} and recv_nick=#{send_nick})
</select>

<!-- 기존 메세지 내역의 room 번호를 가져옴 -->
<select id="select_room"  parameterType="com.ez.teen.chat.model.ChatModel" resultType="String">
    select room from chat
    where (recv_nick = #{recv_nick} and send_nick=#{send_nick}) or (send_nick = #{recv_nick} and recv_nick=#{send_nick})
    AND ROWNUM 
</select>

</mapper>